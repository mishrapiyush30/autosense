name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"
  POSTGRES_PASSWORD: example
  QDRANT_URL: http://localhost:6333

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      qdrant:
        image: qdrant/qdrant:v1.7.3
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run linting
        run: |
          ruff check .
          ruff format --check .

      - name: Run type checking
        run: |
          mypy api.py agent/ eval/ ingest/ index/ ui/

      - name: Wait for services to be ready
        run: |
          echo "Waiting for PostgreSQL..."
          timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
          
          echo "Waiting for Qdrant..."
          timeout 60 bash -c 'until curl -f http://localhost:6333/health; do sleep 1; done'

      - name: Initialize database
        run: |
          export DATABASE_URL="postgresql+psycopg://postgres:${{ env.POSTGRES_PASSWORD }}@localhost:5432/postgres"
          psql -h localhost -U postgres -d postgres -f sql/schema.sql

      - name: Load sample data
        run: |
          export DATABASE_URL="postgresql+psycopg://postgres:${{ env.POSTGRES_PASSWORD }}@localhost:5432/postgres"
          python ingest/dtc.py
          python ingest/recalls.py --ci --lookback 90

      - name: Build vector index
        run: |
          export DATABASE_URL="postgresql+psycopg://postgres:${{ env.POSTGRES_PASSWORD }}@localhost:5432/postgres"
          export QDRANT_URL="http://localhost:6333"
          python index/build_index.py

      - name: Start API server
        run: |
          export DATABASE_URL="postgresql+psycopg://postgres:${{ env.POSTGRES_PASSWORD }}@localhost:5432/postgres"
          export QDRANT_URL="http://localhost:6333"
          uvicorn api:app --host 0.0.0.0 --port 8000 &
          sleep 10

      - name: Run unit tests
        run: |
          pytest tests/ -v --tb=short

      - name: Run evaluation suite
        run: |
          export DATABASE_URL="postgresql+psycopg://postgres:${{ env.POSTGRES_PASSWORD }}@localhost:5432/postgres"
          export QDRANT_URL="http://localhost:6333"
          python eval/run_eval.py

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            eval/results.json
            .pytest_cache/
          retention-days: 7

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: autosense:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/autosense.tar
          retention-days: 1

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here
          # Example: Deploy to Heroku, Railway, or other platforms

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment logic here
          # Example: Deploy to AWS, GCP, or other cloud platforms 